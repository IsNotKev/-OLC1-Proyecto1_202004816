package analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;
import Error_.*;
import ExpresionRegular.*;

parser code  
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        AnalizadorLenguaje.errores.add(new Error_( "Se detectó un error sintáctico ("+s.value+")", "Sintáctico",s.left, s.right));
        
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        AnalizadorLenguaje.errores.add(new Error_( "Se detectó un error sintáctico ("+s.value+")", "Sintáctico",s.left, s.right));
    }  
:} 

terminal String LLAVELEFT, LLAVERIGHT;
terminal String CONJ, DOSPUNTOS, FLECHA;
terminal String PUNTO,OR,POR,MAS,INTERROGACION;
terminal String PUNTOYCOMA, SEPARADOR;
terminal String ID, CADENA;
terminal String CONJUNTOMAY, CONJUNTOMIN, CONJUNTODIGITO, CONJUNTOSIGNO;

non terminal INICIO;
non terminal ArrayList<Object> INSTRUCCIONES;
non terminal Object INSTRUCCION;
non terminal String TCONJUNTO;
non terminal EXPRESION;

precedence left PUNTO,OR;
precedence left POR,MAS,INTERROGACION;

start with INICIO;

INICIO ::= LLAVELEFT INSTRUCCIONES:lista LLAVERIGHT {:
            lista.forEach((t)-> {
                    AnalizadorLenguaje.expresiones.add(t);
                    //System.out.println(t.getClass());
            });
:}
;

INSTRUCCIONES ::=  INSTRUCCIONES:lista INSTRUCCION:val {:
                    RESULT = lista;
                    RESULT.add(val);
                :}
| INSTRUCCION:val {:
                    RESULT = new ArrayList<Object>();
                    RESULT.add(val);

                    :};

INSTRUCCION ::= CONJ DOSPUNTOS ID:id FLECHA TCONJUNTO:con PUNTOYCOMA {: RESULT= new Conjunto(id,con); :}
| ID:id FLECHA EXPRESION:exp PUNTOYCOMA{: RESULT = new ExpresionRegular(id, exp); :}
| ID:id FLECHA EXPRESION:exp PUNTOYCOMA SEPARADOR{: RESULT = new ExpresionRegular(id, exp); :}
| ID:id DOSPUNTOS CADENA:cad PUNTOYCOMA {: RESULT = new LexemaEntrada(cad,id); :}
| error PUNTOYCOMA;

TCONJUNTO ::= CONJUNTOMIN:c {: RESULT=new String(c); :}
| CONJUNTOMAY:c {: RESULT=new String(c); :}
| CONJUNTODIGITO:c {: RESULT=new String(c); :}
| CONJUNTOSIGNO:c {: RESULT=new String(c); :};

EXPRESION ::= PUNTO EXPRESION:exp1 EXPRESION:exp2 {: RESULT = new Expresion(".",exp1,exp2); :}
| OR EXPRESION:exp1 EXPRESION:exp2 {: RESULT = new Expresion("|",exp1,exp2); :}
| MAS EXPRESION:exp1 {: RESULT = new Expresion("+",exp1); :}
| POR EXPRESION:exp1 {: RESULT = new Expresion("*",exp1); :}
| INTERROGACION EXPRESION:exp1 {: RESULT = new Expresion("?",exp1); :}
| LLAVELEFT ID:id LLAVERIGHT {: RESULT = new Dato("id",id); :}
| CADENA:c {: RESULT = new Dato("cadena",c); :};

